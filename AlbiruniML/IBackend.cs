using System;
namespace AlbiruniML
{
    public interface IBackend
    {
        Tensor abs(Tensor x);
        Tensor acos(Tensor x);
        Tensor acosh(Tensor x);
        Tensor Add(Tensor a, Tensor b);
        Tensor ArgMax(Tensor x, int[] axes);
        Tensor ArgMin(Tensor x, int[] axes);
        Tensor asin(Tensor x);
        Tensor asinh(Tensor x);
        Tensor atan(Tensor x);
        Tensor atan2(Tensor a, Tensor b);
        Tensor atanh(Tensor x);
        Tensor avgPool(Tensor x, Conv2DInfo convInfo);
        Tensor avgPoolBackprop(Tensor dy, Tensor x, Conv2DInfo convInfo);
        Tensor batchNormalization(Tensor x, Tensor mean, Tensor variance, float varianceEpsilon,
        Tensor scale = null, Tensor offset = null);
        Tensor LRNGrad(Tensor dy, Tensor inputImage, Tensor outputImage, float depthRadius
           , float bias, float alpha, float beta);
        Tensor ceil(Tensor x);
        Tensor clip(Tensor x, float min, float max);
        Tensor concat(Tensor a, Tensor b);
        Tensor conv2d(Tensor x, Tensor filter, Conv2DInfo convInfo);
        Tensor conv2dDerFilter(Tensor x, Tensor dy, Conv2DInfo convInfo);
        Tensor conv2dDerInput(Tensor dy, Tensor filter, Conv2DInfo convInfo);
        Tensor cos(Tensor x);
        Tensor cosh(Tensor x);
        Tensor cumsum(Tensor x, int axis, bool exclusive, bool reverse);
        Tensor depthwiseConv2D(Tensor x, Tensor filter, Conv2DInfo convInfo);
        Tensor depthwiseConv2DDerInput(Tensor dy, Tensor filter, Conv2DInfo convInfo);
        Tensor depthwiseConv2DDerFilter(Tensor dy, Tensor x, Conv2DInfo convInfo);
        void disposeData(WeakReference dataId);
        Tensor Divide(Tensor a, Tensor b);
        Tensor elu(Tensor x);
        Tensor eluDer(Tensor y, Tensor dy);
        Tensor equal(Tensor a, Tensor b);
        Tensor erf(Tensor x);
        Tensor exp(Tensor x);
        Tensor expm1(Tensor x);
        Tensor floor(Tensor x);
        Tensor batchToSpaceND(Tensor x, int[] blockShape, int[][] crops);
        Tensor gather(Tensor x, Tensor indices, int axis);
        Tensor greater(Tensor a, Tensor b);
        Tensor greaterEqual(Tensor a, Tensor b);
        Tensor integer(Tensor x);
        Tensor less(Tensor a, Tensor b);
        Tensor lessEqual(Tensor a, Tensor b);
        Tensor localResponseNormalization4D(Tensor x, float radius, float bias, float alpha, float beta);
        Tensor log(Tensor x);
        Tensor log1p(Tensor x);
        Tensor logicalAnd(Tensor a, Tensor b);
        Tensor logicalNot(Tensor x);
        Tensor logicalOr(Tensor a, Tensor b);
        Tensor logicalXor(Tensor a, Tensor b);
        Tensor matMul(Tensor a, Tensor b, bool transposeA, bool transposeB);
        Tensor max(Tensor x, int[] axes);
        Tensor maximum(Tensor a, Tensor b);
        Tensor maxPool(Tensor x, Conv2DInfo convInfo);
        Tensor maxPoolBackprop(Tensor dy, Tensor x, Tensor y, Conv2DInfo convInfo);
        Tensor maxPoolPositions(Tensor x, Conv2DInfo convInfo);
        MemoryInfo memory();
        Tensor min(Tensor x, int[] axes);
        Tensor unsortedSegmentSum(Tensor x, Tensor segmentIds, int numSegments);
        Tensor minimum(Tensor a, Tensor b);
        Tensor mod(Tensor a, Tensor b);
        Tensor multinomial(Tensor logits, bool normalized, int numSamples, double seed);
        Tensor Multiply(Tensor a, Tensor b);
        Tensor neg(Tensor a);
        Tensor notEqual(Tensor a, Tensor b);
        Tensor oneHot(Tensor indices, int depth, float onValue, float offValue);
        Tensor pad(Tensor x, int[][] paddings, float varantValue);
        Tensor Pow(Tensor a, Tensor b);
        float[] readSync(WeakReference dataId);
        Tensor reciprocal(Tensor x);
        void register(WeakReference dataId, int[] shape);
        Tensor relu(Tensor x);
        Tensor reshape(Tensor x, int[] shape);
        Tensor resizeBilinear(Tensor x, int newHeight, int newWidth, bool alignCorners);
        Tensor resizeBilinearBackprop(Tensor dy, Tensor x, bool alignCorners);
        Tensor resizeNearestNeighbor(Tensor x, int newHeight, int newWidth, bool alignCorners);
        Tensor reverse(Tensor x, int[] axis);
        Tensor round(Tensor x);
        Tensor rsqrt(Tensor x);
        Tensor selu(Tensor x);
        Tensor sigmoid(Tensor x);
        Tensor sign(Tensor x);
        Tensor sin(Tensor x);
        Tensor sinh(Tensor x);
        int SizeFromShape(int[] shape);
        Tensor slice(Tensor x, int[] begin, int[] size);
        Tensor stridedSlice(Tensor x, int[] begin, int[] end, int[] strides, int beginMask, int endMask);
        Tensor softplus(Tensor x);
        Tensor sqrt(Tensor x);
        Tensor square(Tensor x);
        Tensor squaredDifference(Tensor a, Tensor b);
        Tensor step(Tensor x, float alpha = 0);
        Tensor any(Tensor x, int[] axes);
        Tensor all(Tensor x, int[] axes);
        Tensor Subtract(Tensor a, Tensor b);
        Tensor Sum(Tensor x, int[] axes);
        Tensor tan(Tensor x);
        Tensor tanh(Tensor x);
        Tensor tile(Tensor x, int[] reps);
        long time(Action f);
        Tuple<Tensor, Tensor> topK(Tensor x, int k);
        Tensor topKIndices(Tensor x, int k);
        Tensor topKValues(Tensor x, int k);
        Tensor transpose(Tensor x, int[] perm);
        Tensor where(Tensor condition, Tensor a, Tensor b);
        void write(WeakReference dataId, float[] values);
    }
}
